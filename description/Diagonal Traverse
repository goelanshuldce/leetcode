Diagonal Traverse
Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.

 

Example:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

Output:  [1,2,4,7,5,3,6,8,9]


class Solution {
    fun findDiagonalOrder(matrix: Array<IntArray>): IntArray {
        
        if(matrix.count() == 0){
            return intArrayOf()
        }
        
        val m = matrix.count()
        val n = matrix[0].count()
        
        val output = IntArray(m*n)
        
        // Starting point
        var x = 0  
        var y = 0
        
        // index
        var i = 0
        
        // Traverse direction
        // var up = true
        
        while((x<n || y<m) && i < m*n){
            if((x+y)%2==0){
                if(y > -1 && x < n){
                    output[i] = matrix[y][x]
                    i++ 
                    x++
                    y--
                }
                else {
                    // up = !up
                    if(y < 0 && x < n){
                        y = 0
                    }
                    if(x>=n && y>-1){
                        x = n-1
                        y = y+2
                    }
                    if(y < 0 && x>=n){
                        x = n-1
                        y = 1
                    } 
                    continue
                }
            }
            else {
                if(y < m && x > -1){
                    output[i] = matrix[y][x]
                    i++ 
                    x--
                    y++
                }
                else {
                    // up = !up
                    if(x < 0 && y < m){
                        x = 0
                    }
                    if(y>=m && x>-1){
                        y = m-1
                        x = x + 2
                    }
                    if(x < 0 && y>=m){
                        y = m-1
                        x = 1
                    } 
                    continue
                }
            }
        }
        return output
    }
}