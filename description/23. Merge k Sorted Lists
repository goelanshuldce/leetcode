23. Merge k Sorted Lists
Hard

2843

186

Favorite

Share
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6


/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun mergeKLists(lists: Array<ListNode?>): ListNode? {
        var output: ListNode? = null
        var p: ListNode? = null
        while(true) {
            var cont = false
            var shortestIndex = -1
            var current = Int.MAX_VALUE
            for(l in 0..lists.count()-1){
                if(lists[l]!=null){
                    cont = true
                    if(getVal(lists[l]) < current){
                        shortestIndex = l
                        current = getVal(lists[l]) 
                    }
                }
            }
            if(!cont){break}
            if(shortestIndex != -1){
                lists[shortestIndex] = lists[shortestIndex]?.next
            }
            if(output == null){
                    output = ListNode(current)
                    p = output
            }else{
                    output?.next = ListNode(current)
                    output = output?.next
            }
        }
        return p
    }
    
    fun getVal(a: ListNode?): Int{
        if(a == null){
            return Int.MAX_VALUE
        } else {
            return a.`val`
        }
    }
}